[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Marisol’s Website",
    "section": "",
    "text": "Hello! I’m Marisol Cabrera, a journalism and mass communication student at the George Washington University, based in DC and Chicago."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Marisol’s Website",
    "section": "Education",
    "text": "Education\nThe George Washington University (expected graduation: May 2023)"
  },
  {
    "objectID": "index.html#work-experience",
    "href": "index.html#work-experience",
    "title": "Marisol’s Website",
    "section": "Work Experience",
    "text": "Work Experience\nCommunications Assistant - GWU Graduate Business School Admissions Office (Sept. 2022 - Present)\nCommunications Intern - TransUnion (May 2022 - Aug. 2022)"
  },
  {
    "objectID": "index.html#student-organizations",
    "href": "index.html#student-organizations",
    "title": "Marisol’s Website",
    "section": "Student Organizations",
    "text": "Student Organizations\nExecutive Producer/Creative Director - GW-TV, GWU’s student-run television station (Aug. 2020 - Present)"
  },
  {
    "objectID": "index.html#skills",
    "href": "index.html#skills",
    "title": "Marisol’s Website",
    "section": "Skills",
    "text": "Skills\nAP Style, Adobe Premier Pro, Adobe Audition, Adobe Illustrator, Google Suite, Microsoft Suite, Salesforce, Asana, Canva, Wix, Google Analytics, R Studio"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "portfolio.html",
    "href": "portfolio.html",
    "title": "Portfolio",
    "section": "",
    "text": "Here are some videos I’ve made for GW-TV, my university’s student-run TV station, and other projects I’ve made as a journalism student at the George Washington University."
  },
  {
    "objectID": "portfolio.html#news-episodes",
    "href": "portfolio.html#news-episodes",
    "title": "Portfolio",
    "section": "News Episodes",
    "text": "News Episodes\nHere are two episodes from GWeek, GW-TV’s campus news program, which covers topical events ranging from on campus to international news.\nGWeek 11/16 - Roles: Executive Producer, Editor, Co-Director\nGWeek 10/14 - Roles: Executive Producer, Editor, Co-Director"
  },
  {
    "objectID": "portfolio.html#promo-videos",
    "href": "portfolio.html#promo-videos",
    "title": "Portfolio",
    "section": "Promo Videos",
    "text": "Promo Videos\nObama PSA Project - Roles: Editor, Producer | created for a video production class at GW, meant to practice video editing skills in service of promoting a message.\nGW Balance Promo - Roles: Co-Editor, Co-Producer, Co-Director | created for a web production class at GW, meant to practice filming and editing skills in service of promoting an organization."
  },
  {
    "objectID": "Analysis Walkthrough.html",
    "href": "Analysis Walkthrough.html",
    "title": "Analysis Walkthrough",
    "section": "",
    "text": "Now we are going to create a function that will return the sum of 2 numbers. Then we’ll run an example of the function.\n\n\nCode\nsumnum <- function(x, y) {\n  result <- x+y\n    return(result)\n  } \n\nsumnum(2,3)\n\n\n[1] 5\n\n\nNow lets create a function that will return the mean of a list of numbers fed to it. First you need to create an example set of number to feed the function.\n\n\nCode\nmean_vector <- c(1,2,3)\n\nmean_function <- function(mean_vector){\n  result <- mean(mean_vector)\n  return(result)\n}\n\nmean_function(mean_vector)\n\n\n[1] 2\n\n\nNext, we are adding on to the above function to have it return the results in the form of the sentence “The mean is ___” where the blank is the mean.\n\n\nCode\nmean_vector <- c(1,2,3)\n\nmean_function_print <- function(mean_vector){\n  result <- paste0(\"The mean is \", mean(mean_vector))\n  return(result)\n}\n\nmean_function_print(mean_vector)\n\n\n[1] \"The mean is 2\"\n\n\nWe will now switch up the dataset used. To download this “flights” data set we need to make sure to have the “nycflights13” package installed. Lets run all of this.\n\n\nCode\n#load the data to use for the rest of the assignment questions\nflights <- nycflights13::flights\n\nhead(flights)\n\n\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     1     1      517         515       2     830     819      11 UA     \n2  2013     1     1      533         529       4     850     830      20 UA     \n3  2013     1     1      542         540       2     923     850      33 AA     \n4  2013     1     1      544         545      -1    1004    1022     -18 B6     \n5  2013     1     1      554         600      -6     812     837     -25 DL     \n6  2013     1     1      554         558      -4     740     728      12 UA     \n# … with 9 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\nThis data includes records of individual airline flights departing at New York’s three metro airports, JFK, LaGuardia (LGA) and Newark (EWR).\nNow, we will create a function that filters the data frame to only include records from a single originating airport.\n\n\nCode\nfilter_airport <- function(airport){\n  result <- filter(flights, origin == airport)\n  return(result)\n}\n\n#example\nfilter_airport(\"EWR\")\n\n\n# A tibble: 120,835 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      554        558      -4     740     728      12 UA     \n 3  2013     1     1      555        600      -5     913     854      19 B6     \n 4  2013     1     1      558        600      -2     923     937     -14 UA     \n 5  2013     1     1      559        600      -1     854     902      -8 UA     \n 6  2013     1     1      601        600       1     844     850      -6 B6     \n 7  2013     1     1      606        610      -4     858     910     -12 AA     \n 8  2013     1     1      607        607       0     858     915     -17 UA     \n 9  2013     1     1      608        600       8     807     735      32 MQ     \n10  2013     1     1      615        615       0     833     842      -9 DL     \n# … with 120,825 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\nNext, we will create a function that filters the data frame to only include records from a single originating airport and aggregates the results by airlines to show how many flights each airline has from that airport.\n\n\nCode\nfilter_airport <- function(airport){\n  flight_data_set <- filter(flights, origin == airport)\n  result <- flight_data_set %>% \n    group_by(carrier) %>% \n    summarise(count=n())\n  return(result)\n}\n\nfilter_airport(\"LGA\")\n\n\n# A tibble: 13 × 2\n   carrier count\n   <chr>   <int>\n 1 9E       2541\n 2 AA      15459\n 3 B6       6002\n 4 DL      23067\n 5 EV       8826\n 6 F9        685\n 7 FL       3260\n 8 MQ      16928\n 9 OO         26\n10 UA       8044\n11 US      13136\n12 WN       6087\n13 YV        601"
  }
]